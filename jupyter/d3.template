<!DOCTYPE html>
<html>
    <head>
        <title>Car Scatter plot</title>
        <meta http-equiv="Access-Control-Allow-Origin" content="*"/>
        <style>
        body {
            margin: 0;
            overflow: hidden;
        }

        text {
            font-family: sans-serif;
        }

        .tick text {
            font-size: 1em;
            fill: #635F5D;
        }

        .tick line{
            stroke: #C0C0BB;
        }

        .xAxisLabel{
            font-size: 3em;
            fill: #8E8883;
        }

        .yAxisLabel{
            font-size: 3em;
            fill: #8E8883;
        }

        .title{
            text-anchor: middle;
            font-size: 3em;
            fill: #635F5D;
        }
        
        .circle:hover {
            border: 2px solid red;
        }
            
        
        div.tooltip {
            position: absolute;
            text-align: center;
            width: auto;
            height: auto;
            padding: 2px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }
        
        .axis path,
        .axis line {
          fill: none;
          stroke: #D4D8DA;
          stroke-width: 2px;
          shape-rendering: crispEdges;
        }

        .line {
          fill: none;
          stroke: #6F257F;
          stroke-width: 2px;
        }

        .overlay {
          fill: none;
          pointer-events: all;
        }

        .focus circle {
          fill: #F1F3F3;
          stroke: #6F257F;
          stroke-width: 5px;
        }

        .hover-line {
          stroke: #6F257F;
          stroke-width: 2px;
          stroke-dasharray: 3,3;
        }
        </style>
        <script src="https://d3js.org/d3.v5.min.js"></script>
    </head>
    <body>
        <svg width="960" height="500"></svg>
        <script>

        const svg = d3.select('svg');
        const width = svg.attr('width');
        const height = svg.attr('height');

        const render = (data, covdata) => {
            const title = 'Allele frequency'
            const xValue = d => d.POS;
            const xAxisLabel = 'Position';
            const yValue = d => d.FREQ;
            const yAxisLabel = 'Frequency';
            const circleRadius = 5;
            
            const margin = {top: 60, right: 100, bottom: 88, left: 100};
            const innerWidth = width - margin.left - margin.right;
            const innerHeight = height - margin.top - margin.bottom;

            const xScale = d3.scaleLinear()
                            .domain([0, d3.max(covdata, d => d.POS)])
                            .range([0, innerWidth])
                            .nice();
            
            const yScale = d3.scaleLinear()
                            .domain(d3.extent(data, yValue))
                            .range([innerHeight, 0])
                            .nice();
            
            const yScalecov = d3.scaleLinear()
                            .domain(d3.extent(covdata, d => d.DP))
                            .range([innerHeight, 0])
                            .nice();

            const yAxis = d3.axisLeft(yScale)
                        .tickSize(-innerWidth)
                        .tickPadding(15);
            
            const yAxiscov = d3.axisRight(yScalecov)
                        .tickSize(innerWidth)
                        .tickPadding(20);

            const xAxis = d3.axisBottom(xScale)
                        .tickSize(-innerHeight)
                        .tickPadding(15);

            //to set axis
            const g = svg.append('g')
                        .attr('transform', `translate(${margin.left}, ${margin.top})`);
            
            //Add labels and ticks to axes and remove some ticks
            const yAxisG = g.append('g')
                        .call(yAxis)

            yAxisG.selectAll('.domain')
                    .remove();

            const xAxisG = g.append('g')
                        .call(xAxis)
                        .attr('transform', `translate(0, ${innerHeight})`);
                    
            xAxisG.select('.domain')
                .remove();
            
            const yAxiscovG = g.append('g')
                        .call(yAxiscov);
            
            yAxiscovG.select('.domain')
                .remove();
            
            // Define the div for the tooltip
            var div = d3.select("body").append("div")
                .attr("class", "tooltip")
                .style("opacity", 0);


            //Add x label
            xAxisG.append('text')
                .attr('class', 'xAxisLabel')
                .attr('y',75)
                .attr('x', innerWidth / 2)
                .attr('fill', 'black')
                .text(xAxisLabel);

            //Add y label
            yAxisG.append('text')
                .attr('class', 'yAxisLabel')
                .attr('y', -50)
                .attr('x', - innerHeight / 2)
                .attr('fill', 'black')
                .attr('transform', `rotate(-90)`)
                .attr('text-anchor', 'middle')
                .text(yAxisLabel);

            //Add title
            g.append('text')
                .attr('class', 'title')
                .attr('x', innerWidth / 2 )
                .attr('y', -10)
                .text(title);
            
            //Create line
            
            const line = d3.line()
                .x(function(d) { return xScale(d.POS); })
                .y(function(d) { return yScalecov(d.DP); });
            
            g.append("path")
                .datum(covdata)
                .attr("class", "line")
                .attr("d", line);
            
            //Tooltip line
            var focus = g.append("g")
                .attr("class", "focus")
                .style("display", "none");

            focus.append("line")
                .attr("class", "x-hover-line hover-line")
                .attr("y1", 0)
                .attr("y2", height);

            focus.append("line")
                .attr("class", "y-hover-line hover-line")
                .attr("x1", width)
                .attr("x2", width);

            focus.append("circle")
                .attr("r", 7.5);

            focus.append("text")
                .attr("x", 15)
                .attr("dy", ".31em");

            svg.append("rect")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
                .attr("class", "overlay")
                .attr("width", width)
                .attr("height", height)
                .on("mouseover", function() { focus.style("display", null); })
                .on("mouseout", function() { focus.style("display", "none"); })
                .on("mousemove", mousemove);

            function mousemove() {
              var x0 = x.invert(d3.mouse(this)[0]),
                  i = bisectDate(data, x0, 1),
                  d0 = covdata[i - 1],
                  d1 = covdata[i],
                  d = x0 - d0.POS > d1.DP - x0 ? d1 : d0;
              focus.attr("transform", "translate(" + x(d.POS) + "," + y(d.DP) + ")");
              focus.select("text").text(function() { return d.value; });
              focus.select(".x-hover-line").attr("y2", height - y(d.DP));
              focus.select(".y-hover-line").attr("x2", width + width);
            };
            
            
            
           
            
            //Create scatter
            g.selectAll('circle')
            .data(data)
            .enter()
            .append('circle')
            .attr('fill-opacity', 0.5)
            .attr('stroke-opacity', 1)
            .attr('stroke', function(d) {return (yValue(d) > 50 ? "blue" : "salmon"); })
            .attr('stroke-width',0)
            .attr('fill', function(d) {return (yValue(d) > 50 ? "blue" : "salmon"); })
            .attr('cy', d => yScale(yValue(d)))
            .attr('cx', d => xScale(xValue(d)))
            .attr('r', circleRadius)
            .on("mouseover", function(d) {
                d3.select(this)
                  .transition()
                  .duration(50)
                  .attr('stroke-width',2)

                div.transition()
                    .duration(100)
                    .style("opacity", .9);
                div.html('POS: ' + d.POS + "<br/>"  + 'FREQ: ' + d.FREQ + "<br/>" + d.REF + ">" + d.ALT )
                    .style("left", (d3.event.pageX + 3) + "px")
                    .style("top", (d3.event.pageY - 30) + "px");
                })
            .on("mouseout", function(d) {
                 d3.select(this)
                  .transition()
                  .duration(1000)
                  .attr('stroke-width',0)
                
                div.transition()
                    .duration(500)
                    .style("opacity", 0)
            });


        };
        
    const data = DATA;
    const covdata = COV
    render(data, covdata)
    </script>
                
    </body>
</html>
