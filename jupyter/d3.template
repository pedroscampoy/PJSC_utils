<!DOCTYPE html>
<html>
    <head>
        <title>Car Scatter plot</title>
        <meta http-equiv="Access-Control-Allow-Origin" content="*"/>
        <style>
        body {
            margin: 0;
            overflow: hidden;
        }

        text {
            font-family: sans-serif;
        }

        .tick text {
            font-size: 1em;
            fill: #635F5D;
        }

        .tick line{
            stroke: #C0C0BB;
        }

        .xAxisLabel{
            font-size: 4em;
            fill: #8E8883;
        }

        .yAxisLabel{
            font-size: 4em;
            fill: #8E8883;
        }

        .title{
            font-size: 3.2em;
            fill: #635F5D;
        }
        
        .circle:hover {
            border: 2px solid red;
        }
        
        div.tooltip {
            position: absolute;
            text-align: center;
            width: auto;
            height: 28px;
            padding: 2px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }
        </style>
        <script src="https://d3js.org/d3.v5.min.js"></script>
    </head>
    <body>
        <svg width="960" height="500"></svg>
        <script>

        const svg = d3.select('svg');
        const width = svg.attr('width');
        const height = svg.attr('height');

        //data.forEach(element => console.log(element.population));
        //data.forEach(d => d.population = d.population * 1000);
        //console.log(data)
        const render = data => {
            const title = 'Allele frequency'
            const xValue = d => d.POS;
            const xAxisLabel = 'Position';
            const yValue = d => d.FREQ;
            const yAxisLabel = 'Frequency';
            const circleRadius = 8;
            
            const margin = {top: 60, right: 40, bottom: 88, left: 150};
            const innerWidth = width - margin.left - margin.right;
            const innerHeight = height - margin.top - margin.bottom;

            const xScale = d3.scaleLinear()
                            .domain(d3.extent(data, xValue))
                            .range([0, innerWidth])
                            .nice();
            
            const yScale = d3.scaleLinear()
                            .domain(d3.extent(data, yValue))
                            .range([innerHeight, 0])
                            .nice();

            const yAxis = d3.axisLeft(yScale)
                        .tickSize(-innerWidth)
                        .tickPadding(15);

            const xAxis = d3.axisBottom(xScale)
                        .tickSize(-innerHeight)
                        .tickPadding(15);

            //to set axis
            const g = svg.append('g')
                        .attr('transform', `translate(${margin.left}, ${margin.top})`);
            
            //Add labels and ticks to axes and remove some ticks
            const yAxisG = g.append('g')
                        .call(yAxis)

            yAxisG.selectAll('.domain')
                    .remove();

            const xAxisG = g.append('g')
                        .call(xAxis)
                        .attr('transform', `translate(0, ${innerHeight})`);
                    
            xAxisG.select('.domain')
                .remove();
            
            // Define the div for the tooltip
            var div = d3.select("body").append("div")
                .attr("class", "tooltip")
                .style("opacity", 0);

            //Add x label
            xAxisG.append('text')
                .attr('class', 'xAxisLabel')
                .attr('y',75)
                .attr('x', innerWidth / 2)
                .attr('fill', 'black')
                .text(xAxisLabel);

            //Add y label
            yAxisG.append('text')
                .attr('class', 'yAxisLabel')
                .attr('y', -93)
                .attr('x', - innerHeight / 2)
                .attr('fill', 'black')
                .attr('transform', `rotate(-90)`)
                .attr('text-anchor', 'middle')
                .text(yAxisLabel);

            //Add title
            g.append('text')
                .attr('class', 'title')
                .attr('y', -10)
                .text(title);
            
            //Create elements
            g.selectAll('circle')
            .data(data)
            .enter()
            .append('circle')
            .attr('fill-opacity', 0.5)
            .attr('stroke-opacity', 1)
            .attr('stroke', function(d) {return (yValue(d) > 50 ? "blue" : "salmon"); })
            .attr('stroke-width',0)
            .attr('fill', function(d) {return (yValue(d) > 50 ? "blue" : "salmon"); })
            .attr('cy', d => yScale(yValue(d)))
            .attr('cx', d => xScale(xValue(d)))
            .attr('r', circleRadius)
            .on("mouseover", function(d) {
                d3.select(this)
                  .transition()
                  .duration(50)
                  .attr('stroke-width',2)

                div.transition()
                    .duration(100)
                    .style("opacity", .9);
                div.html('POS: ' + xValue(d) + "<br/>"  + 'FREQ: ' + yValue(d))
                    .style("left", (d3.event.pageX + 3) + "px")
                    .style("top", (d3.event.pageY - 30) + "px");
                })
            .on("mouseout", function(d) {
                 d3.select(this)
                  .transition()
                  .duration(1000)
                  .attr('stroke-width',0)
                
                div.transition()
                    .duration(500)
                    .style("opacity", 0)
            });


        };
        
    const data = DATA;
    render(data)
    </script>
                
    </body>
</html>
